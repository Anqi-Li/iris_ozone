#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 13 13:08:51 2019

@author: anqil
"""
import numpy as np
import matplotlib.pyplot as plt
import xarray as xr
import sys

#%% IRA band
def gIRA (pres,sol_zen):
    #pressure in Pa. solar zenith angle in degree
    d2r=np.pi/180
    
    logp85corr=np.array([-7.,
                            -5.51677832e+00, -5.47384432e+00, -5.43035414e+00, -5.38628065e+00,
                           -5.34159539e+00, -5.29626675e+00, -5.25026155e+00, -5.20354361e+00,
                           -5.15607393e+00, -5.10780999e+00, -5.05870658e+00, -5.00871335e+00,
                           -4.95777577e+00, -4.90583479e+00, -4.85282478e+00, -4.79867481e+00,
                           -4.74330466e+00, -4.68662766e+00, -4.62854591e+00, -4.56895088e+00,
                           -4.50771994e+00, -4.44471559e+00, -4.37978159e+00, -4.31273936e+00,
                           -4.24338432e+00, -4.17132701e+00, -4.09649172e+00, -4.01787775e+00,
                           -3.93488221e+00, -3.84698185e+00, -3.75373381e+00, -3.65477858e+00,
                           -3.54984201e+00, -3.43873830e+00, -3.32137346e+00, -3.19774914e+00,
                           -3.06796702e+00, -2.93223248e+00, -2.79085945e+00, -2.64426997e+00,
                           -2.49295172e+00, -2.33741388e+00, -2.17818109e+00, -2.01579135e+00,
                           -1.85079156e+00, -1.68373602e+00, -1.51517955e+00, -1.34567416e+00,
                           -1.17576692e+00, -1.00599335e+00, -8.36835949e-01, -6.68690824e-01,
                           -5.01857914e-01, -3.36553552e-01, -1.72910030e-01, -1.09823693e-02,
                            1.49248401e-01,  3.07869289e-01,  4.65037639e-01,  6.20978983e-01,
                            7.75935063e-01,  9.30116637e-01,  1.08370375e+00,  1.23684995e+00,
                            1.38969194e+00,  1.54234146e+00,  1.69489018e+00,  1.84741160e+00,
                            1.99995226e+00,  2.15253138e+00,  2.30514089e+00,  2.45774140e+00,
                            2.61026531e+00,  2.76260989e+00,  2.91464127e+00,  3.06619577e+00,
                            3.21681565e+00,  3.36683997e+00,  3.51585920e+00,  3.66374439e+00,
                            3.81038797e+00,  3.95570377e+00,  4.09962606e+00,  4.24211127e+00,
                            4.38313591e+00,  4.52269886e+00,  4.66077268e+00,  4.79739872e+00,
                            4.93268741e+00,  5.06672307e+00,  5.19961223e+00,  5.33148235e+00,
                            5.46248364e+00,  5.59278767e+00,  5.72258652e+00,  5.85207645e+00,
                            5.98144222e+00,  6.11085417e+00,  6.24046914e+00,  6.37042997e+00,
                            6.50086777e+00,  6.63189673e+00,  6.76361868e+00,  6.89612274e+00,
                            7.02948333e+00,  7.16377947e+00,  7.29910627e+00,  7.43558281e+00,
                            7.57334199e+00,  7.71254137e+00,  7.85335655e+00,  7.99598192e+00,
                            8.14063480e+00,  8.28755019e+00,  8.43698424e+00,  8.58921219e+00,
                            8.74451770e+00,  8.90288700e+00,  9.06399760e+00,  9.22751350e+00,
                            9.39309728e+00,  9.56041150e+00,  9.72911829e+00,  9.89887894e+00,
                            1.00693539e+01,  1.02402039e+01,  1.04110887e+01,  1.05816670e+01,
                            1.07515973e+01,  1.09205436e+01,  1.10882395e+01,  1.12545533e+01,
                            1.14194944e+01,  1.15832126e+01,  1.17459852e+01,  1.19080569e+01,
                            1.20694783e+01,  1.22300895e+01,  1.23895218e+01,  1.25472100e+01,
                            1.27025577e+01,  1.28551028e+01,  1.30045306e+01,  1.31506769e+01,
                            1.32935274e+01,  1.34332177e+01,  1.35700338e+01,  1.37044140e+01,
                            1.38369482e+01])
    gIRA85=np.array([1.40410998e-10,
                        1.40410998e-10, 1.40633984e-10, 1.40861737e-10, 1.41094136e-10,
                       1.41331025e-10, 1.41572089e-10, 1.41817278e-10, 1.42066398e-10,
                       1.42319389e-10, 1.42575892e-10, 1.42835222e-10, 1.43096431e-10,
                       1.43358808e-10, 1.43622571e-10, 1.43888182e-10, 1.44154754e-10,
                       1.44420451e-10, 1.44682654e-10, 1.44941969e-10, 1.45198658e-10,
                       1.45451413e-10, 1.45698259e-10, 1.45937710e-10, 1.46168308e-10,
                       1.46388907e-10, 1.46591469e-10, 1.46821970e-10, 1.47038622e-10,
                       1.47228532e-10, 1.47385151e-10, 1.47507182e-10, 1.47597353e-10,
                       1.47660568e-10, 1.47701742e-10, 1.47724140e-10, 1.47732285e-10,
                       1.47731056e-10, 1.47723947e-10, 1.47712485e-10, 1.47698661e-10,
                       1.47683972e-10, 1.47669505e-10, 1.47656068e-10, 1.47644253e-10,
                       1.47634491e-10, 1.47627085e-10, 1.47622227e-10, 1.47620023e-10,
                       1.47620493e-10, 1.47623505e-10, 1.47628563e-10, 1.47635057e-10,
                       1.47642375e-10, 1.47649918e-10, 1.47657133e-10, 1.47663520e-10,
                       1.47668656e-10, 1.47672204e-10, 1.47673898e-10, 1.47673596e-10,
                       1.47671402e-10, 1.47667411e-10, 1.47661660e-10, 1.47654108e-10,
                       1.47644667e-10, 1.47633188e-10, 1.47619465e-10, 1.47603234e-10,
                       1.47584192e-10, 1.47561959e-10, 1.47536114e-10, 1.47506170e-10,
                       1.47471580e-10, 1.47431734e-10, 1.47385964e-10, 1.47333561e-10,
                       1.47273736e-10, 1.47205444e-10, 1.47127533e-10, 1.47038807e-10,
                       1.46938007e-10, 1.46823738e-10, 1.46694426e-10, 1.46548798e-10,
                       1.46384797e-10, 1.46200440e-10, 1.45993417e-10, 1.45761348e-10,
                       1.45501191e-10, 1.45209808e-10, 1.44883491e-10, 1.44517185e-10,
                       1.44105658e-10, 1.43642122e-10, 1.43118990e-10, 1.42527111e-10,
                       1.41856035e-10, 1.41094352e-10, 1.40229172e-10, 1.39244731e-10,
                       1.38125040e-10, 1.36850772e-10, 1.35401288e-10, 1.33754516e-10,
                       1.31886066e-10, 1.29768721e-10, 1.27370759e-10, 1.24659999e-10,
                       1.21601515e-10, 1.18159654e-10, 1.14299727e-10, 1.09991298e-10,
                       1.05210442e-10, 9.99440157e-11, 9.42022276e-11, 8.80191279e-11,
                       8.14753588e-11, 7.47860108e-11, 6.81468273e-11, 6.17516680e-11,
                       5.57838612e-11, 5.03954127e-11, 4.56916614e-11, 4.17267918e-11,
                       3.85064361e-11, 3.59873103e-11, 3.40947832e-11, 3.27425443e-11,
                       3.18166106e-11, 3.12132791e-11, 3.08207361e-11, 3.05591021e-11,
                       3.03438696e-11, 3.01650663e-11, 3.01017526e-11, 3.00829040e-11,
                       3.00355990e-11, 2.99157913e-11, 2.97188686e-11, 2.93839148e-11,
                       2.89659298e-11, 2.84594231e-11, 2.79243473e-11, 2.73135407e-11,
                       2.66756152e-11, 2.59860418e-11, 2.52452662e-11, 2.45105910e-11,
                       2.38024426e-11])
    
    coeff=np.array([-3.90433229e-19,  1.99584747e-16, -4.47281751e-14,  5.77512092e-12,
           -4.74851914e-10,  2.59465839e-08, -9.54424055e-07,  2.34369889e-05,
           -3.73174981e-04,  3.64483013e-03, -1.98135679e-02,  5.00956221e-02,
           -3.95132483e-02])
    
    presscale=np.exp(np.polyval(coeff,sol_zen))
    
    g=np.interp(np.log(pres/np.cos(sol_zen*d2r)*presscale),logp85corr,gIRA85)
    return g

def gIRA_old(pres, sol_zen):
    #pressure in Pa. solar zenith angle in degree
    
    d2r=np.pi/180
    
    logp85corr=np.array([-5.51677832e+00, -5.47384432e+00, -5.43035414e+00, -5.38628065e+00,
                           -5.34159539e+00, -5.29626675e+00, -5.25026155e+00, -5.20354361e+00,
                           -5.15607393e+00, -5.10780999e+00, -5.05870658e+00, -5.00871335e+00,
                           -4.95777577e+00, -4.90583479e+00, -4.85282478e+00, -4.79867481e+00,
                           -4.74330466e+00, -4.68662766e+00, -4.62854591e+00, -4.56895088e+00,
                           -4.50771994e+00, -4.44471559e+00, -4.37978159e+00, -4.31273936e+00,
                           -4.24338432e+00, -4.17132701e+00, -4.09649172e+00, -4.01787775e+00,
                           -3.93488221e+00, -3.84698185e+00, -3.75373381e+00, -3.65477858e+00,
                           -3.54984201e+00, -3.43873830e+00, -3.32137346e+00, -3.19774914e+00,
                           -3.06796702e+00, -2.93223248e+00, -2.79085945e+00, -2.64426997e+00,
                           -2.49295172e+00, -2.33741388e+00, -2.17818109e+00, -2.01579135e+00,
                           -1.85079156e+00, -1.68373602e+00, -1.51517955e+00, -1.34567416e+00,
                           -1.17576692e+00, -1.00599335e+00, -8.36835949e-01, -6.68690824e-01,
                           -5.01857914e-01, -3.36553552e-01, -1.72910030e-01, -1.09823693e-02,
                            1.49248401e-01,  3.07869289e-01,  4.65037639e-01,  6.20978983e-01,
                            7.75935063e-01,  9.30116637e-01,  1.08370375e+00,  1.23684995e+00,
                            1.38969194e+00,  1.54234146e+00,  1.69489018e+00,  1.84741160e+00,
                            1.99995226e+00,  2.15253138e+00,  2.30514089e+00,  2.45774140e+00,
                            2.61026531e+00,  2.76260989e+00,  2.91464127e+00,  3.06619577e+00,
                            3.21681565e+00,  3.36683997e+00,  3.51585920e+00,  3.66374439e+00,
                            3.81038797e+00,  3.95570377e+00,  4.09962606e+00,  4.24211127e+00,
                            4.38313591e+00,  4.52269886e+00,  4.66077268e+00,  4.79739872e+00,
                            4.93268741e+00,  5.06672307e+00,  5.19961223e+00,  5.33148235e+00,
                            5.46248364e+00,  5.59278767e+00,  5.72258652e+00,  5.85207645e+00,
                            5.98144222e+00,  6.11085417e+00,  6.24046914e+00,  6.37042997e+00,
                            6.50086777e+00,  6.63189673e+00,  6.76361868e+00,  6.89612274e+00,
                            7.02948333e+00,  7.16377947e+00,  7.29910627e+00,  7.43558281e+00,
                            7.57334199e+00,  7.71254137e+00,  7.85335655e+00,  7.99598192e+00,
                            8.14063480e+00,  8.28755019e+00,  8.43698424e+00,  8.58921219e+00,
                            8.74451770e+00,  8.90288700e+00,  9.06399760e+00,  9.22751350e+00,
                            9.39309728e+00,  9.56041150e+00,  9.72911829e+00,  9.89887894e+00,
                            1.00693539e+01,  1.02402039e+01,  1.04110887e+01,  1.05816670e+01,
                            1.07515973e+01,  1.09205436e+01,  1.10882395e+01,  1.12545533e+01,
                            1.14194944e+01,  1.15832126e+01,  1.17459852e+01,  1.19080569e+01,
                            1.20694783e+01,  1.22300895e+01,  1.23895218e+01,  1.25472100e+01,
                            1.27025577e+01,  1.28551028e+01,  1.30045306e+01,  1.31506769e+01,
                            1.32935274e+01,  1.34332177e+01,  1.35700338e+01,  1.37044140e+01,
                            1.38369482e+01])
    gIRA85=np.array([1.44727006e-10, 1.44796655e-10, 1.44867362e-10, 1.44939059e-10,
                       1.45011668e-10, 1.45085100e-10, 1.45159254e-10, 1.45234022e-10,
                       1.45309280e-10, 1.45384893e-10, 1.45460712e-10, 1.45536575e-10,
                       1.45612310e-10, 1.45687728e-10, 1.45762628e-10, 1.45836800e-10,
                       1.45910021e-10, 1.45982059e-10, 1.46052676e-10, 1.46121628e-10,
                       1.46188672e-10, 1.46253568e-10, 1.46316082e-10, 1.46375994e-10,
                       1.46433100e-10, 1.46485178e-10, 1.46544429e-10, 1.46601285e-10,
                       1.46652305e-10, 1.46696034e-10, 1.46732296e-10, 1.46761590e-10,
                       1.46784692e-10, 1.46802438e-10, 1.46815637e-10, 1.46825040e-10,
                       1.46831334e-10, 1.46835150e-10, 1.46837065e-10, 1.46837604e-10,
                       1.46837215e-10, 1.46836243e-10, 1.46834946e-10, 1.46833516e-10,
                       1.46832092e-10, 1.46830771e-10, 1.46829611e-10, 1.46828637e-10,
                       1.46827843e-10, 1.46827187e-10, 1.46826564e-10, 1.46825849e-10,
                       1.46824913e-10, 1.46823632e-10, 1.46821898e-10, 1.46819616e-10,
                       1.46816713e-10, 1.46813137e-10, 1.46808846e-10, 1.46803806e-10,
                       1.46797960e-10, 1.46791215e-10, 1.46783446e-10, 1.46774475e-10,
                       1.46764097e-10, 1.46752059e-10, 1.46738064e-10, 1.46721761e-10,
                       1.46702762e-10, 1.46680605e-10, 1.46654788e-10, 1.46624739e-10,
                       1.46589833e-10, 1.46549384e-10, 1.46502657e-10, 1.46448889e-10,
                       1.46387279e-10, 1.46316937e-10, 1.46236836e-10, 1.46145885e-10,
                       1.46042934e-10, 1.45926684e-10, 1.45795647e-10, 1.45648439e-10,
                       1.45483168e-10, 1.45298005e-10, 1.45090680e-10, 1.44858822e-10,
                       1.44599371e-10, 1.44309136e-10, 1.43984316e-10, 1.43619733e-10,
                       1.43209998e-10, 1.42748137e-10, 1.42226366e-10, 1.41635371e-10,
                       1.40964572e-10, 1.40202330e-10, 1.39335563e-10, 1.38348247e-10,
                       1.37223937e-10, 1.35942839e-10, 1.34483509e-10, 1.32822880e-10,
                       1.30935284e-10, 1.28791681e-10, 1.26357722e-10, 1.23598161e-10,
                       1.20473943e-10, 1.16943802e-10, 1.12966212e-10, 1.08501572e-10,
                       1.03514481e-10, 9.79772020e-11, 9.18840029e-11, 8.52509599e-11,
                       7.81358823e-11, 7.07482063e-11, 6.32809212e-11, 5.59290693e-11,
                       4.88832121e-11, 4.23028543e-11, 3.63112183e-11, 3.09754992e-11,
                       2.63179194e-11, 2.23165664e-11, 1.89215834e-11, 1.60669617e-11,
                       1.36824840e-11, 1.16963623e-11, 1.00340180e-11, 8.62912951e-12,
                       7.42709686e-12, 6.38553919e-12, 5.47477388e-12, 4.68850561e-12,
                       4.02558263e-12, 3.47891503e-12, 3.03962176e-12, 2.69337838e-12,
                       2.41900582e-12, 2.19655264e-12, 2.01466905e-12, 1.85761995e-12,
                       1.71769343e-12, 1.58380633e-12, 1.44922650e-12, 1.31042909e-12,
                       1.16508715e-12])
    
    coeff=np.array([-3.90433229e-19,  1.99584747e-16, -4.47281751e-14,  5.77512092e-12,
           -4.74851914e-10,  2.59465839e-08, -9.54424055e-07,  2.34369889e-05,
           -3.73174981e-04,  3.64483013e-03, -1.98135679e-02,  5.00956221e-02,
           -3.95132483e-02])
    
    presscale=np.exp(np.polyval(coeff,sol_zen))
    
    g=np.interp(np.log(pres/np.cos(sol_zen*d2r)*presscale),logp85corr,gIRA85)

    return g


#%% A band
def gA (pres,sol_zen):
    #pressure in Pa. solar zenith angle in degree
    d2r=np.pi/180
    
    logp85corr=np.array([-7,
                        -5.51677832e+00, -5.47384432e+00, -5.43035414e+00, -5.38628065e+00,
                           -5.34159539e+00, -5.29626675e+00, -5.25026155e+00, -5.20354361e+00,
                           -5.15607393e+00, -5.10780999e+00, -5.05870658e+00, -5.00871335e+00,
                           -4.95777577e+00, -4.90583479e+00, -4.85282478e+00, -4.79867481e+00,
                           -4.74330466e+00, -4.68662766e+00, -4.62854591e+00, -4.56895088e+00,
                           -4.50771994e+00, -4.44471559e+00, -4.37978159e+00, -4.31273936e+00,
                           -4.24338432e+00, -4.17132701e+00, -4.09649172e+00, -4.01787775e+00,
                           -3.93488221e+00, -3.84698185e+00, -3.75373381e+00, -3.65477858e+00,
                           -3.54984201e+00, -3.43873830e+00, -3.32137346e+00, -3.19774914e+00,
                           -3.06796702e+00, -2.93223248e+00, -2.79085945e+00, -2.64426997e+00,
                           -2.49295172e+00, -2.33741388e+00, -2.17818109e+00, -2.01579135e+00,
                           -1.85079156e+00, -1.68373602e+00, -1.51517955e+00, -1.34567416e+00,
                           -1.17576692e+00, -1.00599335e+00, -8.36835949e-01, -6.68690824e-01,
                           -5.01857914e-01, -3.36553552e-01, -1.72910030e-01, -1.09823693e-02,
                            1.49248401e-01,  3.07869289e-01,  4.65037639e-01,  6.20978983e-01,
                            7.75935063e-01,  9.30116637e-01,  1.08370375e+00,  1.23684995e+00,
                            1.38969194e+00,  1.54234146e+00,  1.69489018e+00,  1.84741160e+00,
                            1.99995226e+00,  2.15253138e+00,  2.30514089e+00,  2.45774140e+00,
                            2.61026531e+00,  2.76260989e+00,  2.91464127e+00,  3.06619577e+00,
                            3.21681565e+00,  3.36683997e+00,  3.51585920e+00,  3.66374439e+00,
                            3.81038797e+00,  3.95570377e+00,  4.09962606e+00,  4.24211127e+00,
                            4.38313591e+00,  4.52269886e+00,  4.66077268e+00,  4.79739872e+00,
                            4.93268741e+00,  5.06672307e+00,  5.19961223e+00,  5.33148235e+00,
                            5.46248364e+00,  5.59278767e+00,  5.72258652e+00,  5.85207645e+00,
                            5.98144222e+00,  6.11085417e+00,  6.24046914e+00,  6.37042997e+00,
                            6.50086777e+00,  6.63189673e+00,  6.76361868e+00,  6.89612274e+00,
                            7.02948333e+00,  7.16377947e+00,  7.29910627e+00,  7.43558281e+00,
                            7.57334199e+00,  7.71254137e+00,  7.85335655e+00,  7.99598192e+00,
                            8.14063480e+00,  8.28755019e+00,  8.43698424e+00,  8.58921219e+00,
                            8.74451770e+00,  8.90288700e+00,  9.06399760e+00,  9.22751350e+00,
                            9.39309728e+00,  9.56041150e+00,  9.72911829e+00,  9.89887894e+00,
                            1.00693539e+01,  1.02402039e+01,  1.04110887e+01,  1.05816670e+01,
                            1.07515973e+01,  1.09205436e+01,  1.10882395e+01,  1.12545533e+01,
                            1.14194944e+01,  1.15832126e+01,  1.17459852e+01,  1.19080569e+01,
                            1.20694783e+01,  1.22300895e+01,  1.23895218e+01,  1.25472100e+01,
                            1.27025577e+01,  1.28551028e+01,  1.30045306e+01,  1.31506769e+01,
                            1.32935274e+01,  1.34332177e+01,  1.35700338e+01,  1.37044140e+01,
                            1.38369482e+01])
    gA85=np.array([6.01966695e-09,
                      6.01966695e-09, 6.02587341e-09, 6.03218597e-09, 6.03859833e-09,
                       6.04510289e-09, 6.05168540e-09, 6.05834330e-09, 6.06506815e-09,
                       6.07185745e-09, 6.07869647e-09, 6.08555677e-09, 6.09239934e-09,
                       6.09919568e-09, 6.10595726e-09, 6.11270653e-09, 6.11940893e-09,
                       6.12599011e-09, 6.13234353e-09, 6.13849983e-09, 6.14447565e-09,
                       6.15022153e-09, 6.15566047e-09, 6.16073693e-09, 6.16539715e-09,
                       6.16960128e-09, 6.17321804e-09, 6.17695239e-09, 6.17986846e-09,
                       6.18178900e-09, 6.18268123e-09, 6.18263075e-09, 6.18181491e-09,
                       6.18044779e-09, 6.17870756e-09, 6.17668143e-09, 6.17449626e-09,
                       6.17228934e-09, 6.17013865e-09, 6.16804327e-09, 6.16602142e-09,
                       6.16406432e-09, 6.16215159e-09, 6.16025809e-09, 6.15835221e-09,
                       6.15639631e-09, 6.15434861e-09, 6.15216000e-09, 6.14977859e-09,
                       6.14714626e-09, 6.14420110e-09, 6.14085091e-09, 6.13699440e-09,
                       6.13252618e-09, 6.12732723e-09, 6.12127318e-09, 6.11421388e-09,
                       6.10598205e-09, 6.09638051e-09, 6.08515375e-09, 6.07201408e-09,
                       6.05665884e-09, 6.03874578e-09, 6.01789083e-09, 5.99361562e-09,
                       5.96540859e-09, 5.93266855e-09, 5.89472001e-09, 5.85079398e-09,
                       5.80007682e-09, 5.74164332e-09, 5.67455148e-09, 5.59781436e-09,
                       5.51046272e-09, 5.41158287e-09, 5.30039017e-09, 5.17632952e-09,
                       5.03909803e-09, 4.88847600e-09, 4.72441570e-09, 4.54723454e-09,
                       4.35763107e-09, 4.15659391e-09, 3.94539467e-09, 3.72591842e-09,
                       3.49997101e-09, 3.26985614e-09, 3.03790245e-09, 2.80664703e-09,
                       2.57843685e-09, 2.35560644e-09, 2.14019809e-09, 1.93391038e-09,
                       1.73819559e-09, 1.55412510e-09, 1.38243550e-09, 1.22386922e-09,
                       1.07889518e-09, 9.47556249e-10, 8.29514941e-10, 7.24348205e-10,
                       6.31192667e-10, 5.49258359e-10, 4.77617578e-10, 4.15295219e-10,
                       3.61346281e-10, 3.14734252e-10, 2.74629039e-10, 2.40185833e-10,
                       2.10747943e-10, 1.85758850e-10, 1.64740457e-10, 1.47285856e-10,
                       1.33077259e-10, 1.21871725e-10, 1.13393656e-10, 1.07459137e-10,
                       1.04010969e-10, 1.03088945e-10, 1.04181492e-10, 1.06761555e-10,
                       1.10283829e-10, 1.14163747e-10, 1.17858983e-10, 1.20840878e-10,
                       1.22552573e-10, 1.22901409e-10, 1.21936774e-10, 1.20066944e-10,
                       1.17083445e-10, 1.13360779e-10, 1.08783137e-10, 1.03570401e-10,
                       9.75917826e-11, 9.11088954e-11, 8.39765842e-11, 7.61178745e-11,
                       6.79935241e-11, 6.17932461e-11, 6.17966997e-11, 6.21686621e-11,
                       6.17810163e-11, 5.90059283e-11, 5.41402204e-11, 4.69897160e-11,
                       3.96540264e-11, 3.32432305e-11, 2.83111959e-11, 2.46175330e-11,
                       2.17711145e-11])
    coeff=np.array([-3.90433229e-19,  1.99584747e-16, -4.47281751e-14,  5.77512092e-12,
           -4.74851914e-10,  2.59465839e-08, -9.54424055e-07,  2.34369889e-05,
           -3.73174981e-04,  3.64483013e-03, -1.98135679e-02,  5.00956221e-02,
           -3.95132483e-02])
    presscale=np.exp(np.polyval(coeff,sol_zen))
    g=np.interp(np.log(pres/np.cos(sol_zen*d2r)*presscale),logp85corr,gA85)
    return g

def gA_old(pres,sol_zen):
    #pressure in Pa. solar zenith angle in degree
    d2r=np.pi/180
    
    logp85corr=np.array([-7,
                        -5.51677832e+00, -5.47384432e+00, -5.43035414e+00, -5.38628065e+00,
                           -5.34159539e+00, -5.29626675e+00, -5.25026155e+00, -5.20354361e+00,
                           -5.15607393e+00, -5.10780999e+00, -5.05870658e+00, -5.00871335e+00,
                           -4.95777577e+00, -4.90583479e+00, -4.85282478e+00, -4.79867481e+00,
                           -4.74330466e+00, -4.68662766e+00, -4.62854591e+00, -4.56895088e+00,
                           -4.50771994e+00, -4.44471559e+00, -4.37978159e+00, -4.31273936e+00,
                           -4.24338432e+00, -4.17132701e+00, -4.09649172e+00, -4.01787775e+00,
                           -3.93488221e+00, -3.84698185e+00, -3.75373381e+00, -3.65477858e+00,
                           -3.54984201e+00, -3.43873830e+00, -3.32137346e+00, -3.19774914e+00,
                           -3.06796702e+00, -2.93223248e+00, -2.79085945e+00, -2.64426997e+00,
                           -2.49295172e+00, -2.33741388e+00, -2.17818109e+00, -2.01579135e+00,
                           -1.85079156e+00, -1.68373602e+00, -1.51517955e+00, -1.34567416e+00,
                           -1.17576692e+00, -1.00599335e+00, -8.36835949e-01, -6.68690824e-01,
                           -5.01857914e-01, -3.36553552e-01, -1.72910030e-01, -1.09823693e-02,
                            1.49248401e-01,  3.07869289e-01,  4.65037639e-01,  6.20978983e-01,
                            7.75935063e-01,  9.30116637e-01,  1.08370375e+00,  1.23684995e+00,
                            1.38969194e+00,  1.54234146e+00,  1.69489018e+00,  1.84741160e+00,
                            1.99995226e+00,  2.15253138e+00,  2.30514089e+00,  2.45774140e+00,
                            2.61026531e+00,  2.76260989e+00,  2.91464127e+00,  3.06619577e+00,
                            3.21681565e+00,  3.36683997e+00,  3.51585920e+00,  3.66374439e+00,
                            3.81038797e+00,  3.95570377e+00,  4.09962606e+00,  4.24211127e+00,
                            4.38313591e+00,  4.52269886e+00,  4.66077268e+00,  4.79739872e+00,
                            4.93268741e+00,  5.06672307e+00,  5.19961223e+00,  5.33148235e+00,
                            5.46248364e+00,  5.59278767e+00,  5.72258652e+00,  5.85207645e+00,
                            5.98144222e+00,  6.11085417e+00,  6.24046914e+00,  6.37042997e+00,
                            6.50086777e+00,  6.63189673e+00,  6.76361868e+00,  6.89612274e+00,
                            7.02948333e+00,  7.16377947e+00,  7.29910627e+00,  7.43558281e+00,
                            7.57334199e+00,  7.71254137e+00,  7.85335655e+00,  7.99598192e+00,
                            8.14063480e+00,  8.28755019e+00,  8.43698424e+00,  8.58921219e+00,
                            8.74451770e+00,  8.90288700e+00,  9.06399760e+00,  9.22751350e+00,
                            9.39309728e+00,  9.56041150e+00,  9.72911829e+00,  9.89887894e+00,
                            1.00693539e+01,  1.02402039e+01,  1.04110887e+01,  1.05816670e+01,
                            1.07515973e+01,  1.09205436e+01,  1.10882395e+01,  1.12545533e+01,
                            1.14194944e+01,  1.15832126e+01,  1.17459852e+01,  1.19080569e+01,
                            1.20694783e+01,  1.22300895e+01,  1.23895218e+01,  1.25472100e+01,
                            1.27025577e+01,  1.28551028e+01,  1.30045306e+01,  1.31506769e+01,
                            1.32935274e+01,  1.34332177e+01,  1.35700338e+01,  1.37044140e+01,
                            1.38369482e+01])
    gA85=np.array([6.09157858e-09,
                    6.09157858e-09, 6.09251928e-09, 6.09347388e-09, 6.09444183e-09,
                   6.09542257e-09, 6.09641547e-09, 6.09741985e-09, 6.09843503e-09,
                   6.09946028e-09, 6.10049484e-09, 6.10153793e-09, 6.10258877e-09,
                   6.10364656e-09, 6.10471053e-09, 6.10577987e-09, 6.10685381e-09,
                   6.10793161e-09, 6.10901250e-09, 6.11009572e-09, 6.11118049e-09,
                   6.11226596e-09, 6.11335117e-09, 6.11443494e-09, 6.11551578e-09,
                   6.11659168e-09, 6.11761801e-09, 6.11885227e-09, 6.12011209e-09,
                   6.12131334e-09, 6.12239792e-09, 6.12332965e-09, 6.12408947e-09,
                   6.12467091e-09, 6.12507578e-09, 6.12531147e-09, 6.12538725e-09,
                   6.12531347e-09, 6.12509846e-09, 6.12474884e-09, 6.12426661e-09,
                   6.12364813e-09, 6.12288149e-09, 6.12194814e-09, 6.12082152e-09,
                   6.11946782e-09, 6.11784804e-09, 6.11591500e-09, 6.11361794e-09,
                   6.11089922e-09, 6.10770126e-09, 6.10395380e-09, 6.09958182e-09,
                   6.09450636e-09, 6.08863510e-09, 6.08187102e-09, 6.07409183e-09,
                   6.06515903e-09, 6.05490504e-09, 6.04310452e-09, 6.02949422e-09,
                   6.01376963e-09, 5.99557988e-09, 5.97453208e-09, 5.95013843e-09,
                   5.92187827e-09, 5.88914107e-09, 5.85124210e-09, 5.80740308e-09,
                   5.75680177e-09, 5.69850415e-09, 5.63156031e-09, 5.55497585e-09,
                   5.46777467e-09, 5.36903714e-09, 5.25797344e-09, 5.13402441e-09,
                   4.99688632e-09, 4.84635815e-09, 4.68240566e-09, 4.50535667e-09,
                   4.31591944e-09, 4.11508955e-09, 3.90414252e-09, 3.68496342e-09,
                   3.45935898e-09, 3.22963384e-09, 2.99810928e-09, 2.76731466e-09,
                   2.53958428e-09, 2.31724243e-09, 2.10231940e-09, 1.89649733e-09,
                   1.70121762e-09, 1.51753801e-09, 1.34618441e-09, 1.18788397e-09,
                   1.04309294e-09, 9.11844419e-10, 7.93794820e-10, 6.88510455e-10,
                   5.95124535e-10, 5.12836786e-10, 4.40713525e-10, 3.77771688e-10,
                   3.23054776e-10, 2.75514087e-10, 2.34305030e-10, 1.98560160e-10,
                   1.67593066e-10, 1.40815959e-10, 1.17707621e-10, 9.78123234e-11,
                   8.07538187e-11, 6.62265538e-11, 5.38746785e-11, 4.34269891e-11,
                   3.47905438e-11, 2.80926297e-11, 2.29124588e-11, 1.88756912e-11,
                   1.56921572e-11, 1.31958133e-11, 1.11910807e-11, 9.57059275e-12,
                   8.27451631e-12, 7.21467198e-12, 6.34569357e-12, 5.63061635e-12,
                   5.03990761e-12, 4.54426802e-12, 4.10905368e-12, 3.70519276e-12,
                   3.31466082e-12, 2.93177541e-12, 2.55962436e-12, 2.22055887e-12,
                   1.93450186e-12, 1.70697212e-12, 1.53783147e-12, 1.41804780e-12,
                   1.33079484e-12, 1.26008732e-12, 1.20063723e-12, 1.13989096e-12,
                   1.07664765e-12, 1.00334731e-12, 9.19522250e-13, 8.27433655e-13,
                   7.28351066e-13])
    coeff=np.array([-3.90433229e-19,  1.99584747e-16, -4.47281751e-14,  5.77512092e-12,
           -4.74851914e-10,  2.59465839e-08, -9.54424055e-07,  2.34369889e-05,
           -3.73174981e-04,  3.64483013e-03, -1.98135679e-02,  5.00956221e-02,
           -3.95132483e-02])
    presscale=np.exp(np.polyval(coeff,sol_zen))
    g=np.interp(np.log(pres/np.cos(sol_zen*d2r)*presscale),logp85corr,gA85)
    return g

#%% B band
def gB (pres,sol_zen):
    #pressure in Pa. solar zenith angle in degreea
    d2r=np.pi/180
    
    logp85corr=np.array([-7.0,
                        -5.51677832e+00, -5.47384432e+00, -5.43035414e+00, -5.38628065e+00,
                           -5.34159539e+00, -5.29626675e+00, -5.25026155e+00, -5.20354361e+00,
                           -5.15607393e+00, -5.10780999e+00, -5.05870658e+00, -5.00871335e+00,
                           -4.95777577e+00, -4.90583479e+00, -4.85282478e+00, -4.79867481e+00,
                           -4.74330466e+00, -4.68662766e+00, -4.62854591e+00, -4.56895088e+00,
                           -4.50771994e+00, -4.44471559e+00, -4.37978159e+00, -4.31273936e+00,
                           -4.24338432e+00, -4.17132701e+00, -4.09649172e+00, -4.01787775e+00,
                           -3.93488221e+00, -3.84698185e+00, -3.75373381e+00, -3.65477858e+00,
                           -3.54984201e+00, -3.43873830e+00, -3.32137346e+00, -3.19774914e+00,
                           -3.06796702e+00, -2.93223248e+00, -2.79085945e+00, -2.64426997e+00,
                           -2.49295172e+00, -2.33741388e+00, -2.17818109e+00, -2.01579135e+00,
                           -1.85079156e+00, -1.68373602e+00, -1.51517955e+00, -1.34567416e+00,
                           -1.17576692e+00, -1.00599335e+00, -8.36835949e-01, -6.68690824e-01,
                           -5.01857914e-01, -3.36553552e-01, -1.72910030e-01, -1.09823693e-02,
                            1.49248401e-01,  3.07869289e-01,  4.65037639e-01,  6.20978983e-01,
                            7.75935063e-01,  9.30116637e-01,  1.08370375e+00,  1.23684995e+00,
                            1.38969194e+00,  1.54234146e+00,  1.69489018e+00,  1.84741160e+00,
                            1.99995226e+00,  2.15253138e+00,  2.30514089e+00,  2.45774140e+00,
                            2.61026531e+00,  2.76260989e+00,  2.91464127e+00,  3.06619577e+00,
                            3.21681565e+00,  3.36683997e+00,  3.51585920e+00,  3.66374439e+00,
                            3.81038797e+00,  3.95570377e+00,  4.09962606e+00,  4.24211127e+00,
                            4.38313591e+00,  4.52269886e+00,  4.66077268e+00,  4.79739872e+00,
                            4.93268741e+00,  5.06672307e+00,  5.19961223e+00,  5.33148235e+00,
                            5.46248364e+00,  5.59278767e+00,  5.72258652e+00,  5.85207645e+00,
                            5.98144222e+00,  6.11085417e+00,  6.24046914e+00,  6.37042997e+00,
                            6.50086777e+00,  6.63189673e+00,  6.76361868e+00,  6.89612274e+00,
                            7.02948333e+00,  7.16377947e+00,  7.29910627e+00,  7.43558281e+00,
                            7.57334199e+00,  7.71254137e+00,  7.85335655e+00,  7.99598192e+00,
                            8.14063480e+00,  8.28755019e+00,  8.43698424e+00,  8.58921219e+00,
                            8.74451770e+00,  8.90288700e+00,  9.06399760e+00,  9.22751350e+00,
                            9.39309728e+00,  9.56041150e+00,  9.72911829e+00,  9.89887894e+00,
                            1.00693539e+01,  1.02402039e+01,  1.04110887e+01,  1.05816670e+01,
                            1.07515973e+01,  1.09205436e+01,  1.10882395e+01,  1.12545533e+01,
                            1.14194944e+01,  1.15832126e+01,  1.17459852e+01,  1.19080569e+01,
                            1.20694783e+01,  1.22300895e+01,  1.23895218e+01,  1.25472100e+01,
                            1.27025577e+01,  1.28551028e+01,  1.30045306e+01,  1.31506769e+01,
                            1.32935274e+01,  1.34332177e+01,  1.35700338e+01,  1.37044140e+01,
                            1.38369482e+01])
    gB85=np.array([3.52437152e-10,
                    3.52437152e-10, 3.52779685e-10, 3.53126900e-10, 3.53478312e-10,
                   3.53833347e-10, 3.54191025e-10, 3.54551065e-10, 3.54912820e-10,
                   3.55275986e-10, 3.55639529e-10, 3.56001591e-10, 3.56359687e-10,
                   3.56711935e-10, 3.57058793e-10, 3.57401349e-10, 3.57737332e-10,
                   3.58062127e-10, 3.58369227e-10, 3.58660153e-10, 3.58935595e-10,
                   3.59192367e-10, 3.59425664e-10, 3.59631944e-10, 3.59807775e-10,
                   3.59950564e-10, 3.60056826e-10, 3.60138938e-10, 3.60157684e-10,
                   3.60110723e-10, 3.60003172e-10, 3.59845757e-10, 3.59653138e-10,
                   3.59440800e-10, 3.59221023e-10, 3.58999902e-10, 3.58785277e-10,
                   3.58585190e-10, 3.58404106e-10, 3.58241875e-10, 3.58099470e-10,
                   3.57975922e-10, 3.57870008e-10, 3.57780738e-10, 3.57707309e-10,
                   3.57649061e-10, 3.57605468e-10, 3.57576100e-10, 3.57560629e-10,
                   3.57558812e-10, 3.57570109e-10, 3.57592409e-10, 3.57623220e-10,
                   3.57660033e-10, 3.57700245e-10, 3.57741165e-10, 3.57779921e-10,
                   3.57813463e-10, 3.57838515e-10, 3.57851475e-10, 3.57849099e-10,
                   3.57830384e-10, 3.57794793e-10, 3.57741659e-10, 3.57669977e-10,
                   3.57578594e-10, 3.57465974e-10, 3.57330215e-10, 3.57168927e-10,
                   3.56979361e-10, 3.56758070e-10, 3.56501191e-10, 3.56204208e-10,
                   3.55862074e-10, 3.55469188e-10, 3.55019524e-10, 3.54506866e-10,
                   3.53924472e-10, 3.53262581e-10, 3.52510650e-10, 3.51657845e-10,
                   3.50692818e-10, 3.49602986e-10, 3.48374159e-10, 3.46993635e-10,
                   3.45443699e-10, 3.43707383e-10, 3.41764457e-10, 3.39594292e-10,
                   3.37170857e-10, 3.34467820e-10, 3.31454703e-10, 3.28090922e-10,
                   3.24336222e-10, 3.20140011e-10, 3.15449196e-10, 3.10205136e-10,
                   3.04346494e-10, 2.97813026e-10, 2.90544523e-10, 2.82473991e-10,
                   2.73549907e-10, 2.63720152e-10, 2.52950414e-10, 2.41229282e-10,
                   2.28567923e-10, 2.15000528e-10, 2.00585965e-10, 1.85434053e-10,
                   1.69697182e-10, 1.53579176e-10, 1.37334938e-10, 1.21263941e-10,
                   1.05692960e-10, 9.09547363e-11, 7.73577911e-11, 6.51468963e-11,
                   5.45300572e-11, 4.57712943e-11, 3.87852310e-11, 3.33647873e-11,
                   2.92699827e-11, 2.62872986e-11, 2.42052326e-11, 2.28585573e-11,
                   2.21096500e-11, 2.18247836e-11, 2.18898482e-11, 2.22111389e-11,
                   2.26585612e-11, 2.31477425e-11, 2.35746712e-11, 2.38926325e-11,
                   2.40486132e-11, 2.40637382e-11, 2.39253380e-11, 2.36134490e-11,
                   2.31723917e-11, 2.25984530e-11, 2.22202106e-11, 2.19563867e-11,
                   2.16880637e-11, 2.13560270e-11, 2.09842556e-11, 2.04804961e-11,
                   1.98360988e-11, 1.89683751e-11, 1.79534234e-11, 1.69094996e-11,
                   1.58842721e-11])
    
    coeff=np.array([-3.90433229e-19,  1.99584747e-16, -4.47281751e-14,  5.77512092e-12,
           -4.74851914e-10,  2.59465839e-08, -9.54424055e-07,  2.34369889e-05,
           -3.73174981e-04,  3.64483013e-03, -1.98135679e-02,  5.00956221e-02,
           -3.95132483e-02])
    
    presscale=np.exp(np.polyval(coeff,sol_zen))
#     print (gB85.shape,logp85corr.shape)
    
    g=np.interp(np.log(pres/np.cos(sol_zen*d2r)*presscale),logp85corr,gB85)
    return g

def gB_old(pres,sol_zen):
    #pressure in Pa. solar zenith angle in degree
    d2r=np.pi/180
    
    logp85corr=np.array([-5.51677832e+00, -5.47384432e+00, -5.43035414e+00, -5.38628065e+00,
                           -5.34159539e+00, -5.29626675e+00, -5.25026155e+00, -5.20354361e+00,
                           -5.15607393e+00, -5.10780999e+00, -5.05870658e+00, -5.00871335e+00,
                           -4.95777577e+00, -4.90583479e+00, -4.85282478e+00, -4.79867481e+00,
                           -4.74330466e+00, -4.68662766e+00, -4.62854591e+00, -4.56895088e+00,
                           -4.50771994e+00, -4.44471559e+00, -4.37978159e+00, -4.31273936e+00,
                           -4.24338432e+00, -4.17132701e+00, -4.09649172e+00, -4.01787775e+00,
                           -3.93488221e+00, -3.84698185e+00, -3.75373381e+00, -3.65477858e+00,
                           -3.54984201e+00, -3.43873830e+00, -3.32137346e+00, -3.19774914e+00,
                           -3.06796702e+00, -2.93223248e+00, -2.79085945e+00, -2.64426997e+00,
                           -2.49295172e+00, -2.33741388e+00, -2.17818109e+00, -2.01579135e+00,
                           -1.85079156e+00, -1.68373602e+00, -1.51517955e+00, -1.34567416e+00,
                           -1.17576692e+00, -1.00599335e+00, -8.36835949e-01, -6.68690824e-01,
                           -5.01857914e-01, -3.36553552e-01, -1.72910030e-01, -1.09823693e-02,
                            1.49248401e-01,  3.07869289e-01,  4.65037639e-01,  6.20978983e-01,
                            7.75935063e-01,  9.30116637e-01,  1.08370375e+00,  1.23684995e+00,
                            1.38969194e+00,  1.54234146e+00,  1.69489018e+00,  1.84741160e+00,
                            1.99995226e+00,  2.15253138e+00,  2.30514089e+00,  2.45774140e+00,
                            2.61026531e+00,  2.76260989e+00,  2.91464127e+00,  3.06619577e+00,
                            3.21681565e+00,  3.36683997e+00,  3.51585920e+00,  3.66374439e+00,
                            3.81038797e+00,  3.95570377e+00,  4.09962606e+00,  4.24211127e+00,
                            4.38313591e+00,  4.52269886e+00,  4.66077268e+00,  4.79739872e+00,
                            4.93268741e+00,  5.06672307e+00,  5.19961223e+00,  5.33148235e+00,
                            5.46248364e+00,  5.59278767e+00,  5.72258652e+00,  5.85207645e+00,
                            5.98144222e+00,  6.11085417e+00,  6.24046914e+00,  6.37042997e+00,
                            6.50086777e+00,  6.63189673e+00,  6.76361868e+00,  6.89612274e+00,
                            7.02948333e+00,  7.16377947e+00,  7.29910627e+00,  7.43558281e+00,
                            7.57334199e+00,  7.71254137e+00,  7.85335655e+00,  7.99598192e+00,
                            8.14063480e+00,  8.28755019e+00,  8.43698424e+00,  8.58921219e+00,
                            8.74451770e+00,  8.90288700e+00,  9.06399760e+00,  9.22751350e+00,
                            9.39309728e+00,  9.56041150e+00,  9.72911829e+00,  9.89887894e+00,
                            1.00693539e+01,  1.02402039e+01,  1.04110887e+01,  1.05816670e+01,
                            1.07515973e+01,  1.09205436e+01,  1.10882395e+01,  1.12545533e+01,
                            1.14194944e+01,  1.15832126e+01,  1.17459852e+01,  1.19080569e+01,
                            1.20694783e+01,  1.22300895e+01,  1.23895218e+01,  1.25472100e+01,
                            1.27025577e+01,  1.28551028e+01,  1.30045306e+01,  1.31506769e+01,
                            1.32935274e+01,  1.34332177e+01,  1.35700338e+01,  1.37044140e+01,
                            1.38369482e+01])
    gB85=np.array([3.58246730e-10, 3.58281568e-10, 3.58315745e-10, 3.58349120e-10,
                   3.58381540e-10, 3.58412841e-10, 3.58442850e-10, 3.58471380e-10,
                   3.58498231e-10, 3.58523194e-10, 3.58546046e-10, 3.58566551e-10,
                   3.58584462e-10, 3.58599520e-10, 3.58611451e-10, 3.58619974e-10,
                   3.58624793e-10, 3.58625601e-10, 3.58622080e-10, 3.58613900e-10,
                   3.58600722e-10, 3.58582193e-10, 3.58557945e-10, 3.58527599e-10,
                   3.58490757e-10, 3.58448828e-10, 3.58388863e-10, 3.58315165e-10,
                   3.58230538e-10, 3.58138379e-10, 3.58042132e-10, 3.57944902e-10,
                   3.57849267e-10, 3.57757222e-10, 3.57670230e-10, 3.57589312e-10,
                   3.57515155e-10, 3.57448213e-10, 3.57388802e-10, 3.57336989e-10,
                   3.57292141e-10, 3.57253567e-10, 3.57220688e-10, 3.57193011e-10,
                   3.57170115e-10, 3.57151642e-10, 3.57137277e-10, 3.57126757e-10,
                   3.57119851e-10, 3.57116257e-10, 3.57115128e-10, 3.57115489e-10,
                   3.57116347e-10, 3.57116638e-10, 3.57115241e-10, 3.57110891e-10,
                   3.57102202e-10, 3.57087611e-10, 3.57065281e-10, 3.57033391e-10,
                   3.56990809e-10, 3.56936458e-10, 3.56869108e-10, 3.56787168e-10,
                   3.56688886e-10, 3.56572117e-10, 3.56434338e-10, 3.56272539e-10,
                   3.56083343e-10, 3.55862682e-10, 3.55606067e-10, 3.55308362e-10,
                   3.54963899e-10, 3.54566460e-10, 3.54109398e-10, 3.53585876e-10,
                   3.52988698e-10, 3.52308917e-10, 3.51536559e-10, 3.50661234e-10,
                   3.49672052e-10, 3.48556891e-10, 3.47302031e-10, 3.45894826e-10,
                   3.44318301e-10, 3.42556277e-10, 3.40589077e-10, 3.38396636e-10,
                   3.35953449e-10, 3.33233703e-10, 3.30207391e-10, 3.26834319e-10,
                   3.23074576e-10, 3.18877801e-10, 3.14190918e-10, 3.08954688e-10,
                   3.03107017e-10, 2.96586472e-10, 2.89331666e-10, 2.81274179e-10,
                   2.72360432e-10, 2.62536342e-10, 2.51764712e-10, 2.40031071e-10,
                   2.27343403e-10, 2.13732383e-10, 1.99252283e-10, 1.84008869e-10,
                   1.68150192e-10, 1.51875020e-10, 1.35434144e-10, 1.19122827e-10,
                   1.03263861e-10, 8.81858237e-11, 7.41936234e-11, 6.15252927e-11,
                   5.03791974e-11, 4.10207109e-11, 3.33570912e-11, 2.71697508e-11,
                   2.22079529e-11, 1.82521136e-11, 1.50839513e-11, 1.25408394e-11,
                   1.05044604e-11, 8.85956193e-12, 7.52607405e-12, 6.44048406e-12,
                   5.55366697e-12, 4.82316072e-12, 4.20854590e-12, 3.67674268e-12,
                   3.20406118e-12, 2.77622169e-12, 2.38663167e-12, 2.04282766e-12,
                   1.75296830e-12, 1.51782570e-12, 1.33517299e-12, 1.19771429e-12,
                   1.09317964e-12, 1.00963703e-12, 9.41068740e-13, 8.77850397e-13,
                   8.17070560e-13, 7.53416584e-13, 6.85162206e-13, 6.12270059e-13,
                   5.34679042e-13])
    
    coeff=np.array([-3.90433229e-19,  1.99584747e-16, -4.47281751e-14,  5.77512092e-12,
           -4.74851914e-10,  2.59465839e-08, -9.54424055e-07,  2.34369889e-05,
           -3.73174981e-04,  3.64483013e-03, -1.98135679e-02,  5.00956221e-02,
           -3.95132483e-02])
    
    presscale=np.exp(np.polyval(coeff,sol_zen))
#    print (gB85.shape,logp85corr.shape)
    
    g=np.interp(np.log(pres/np.cos(sol_zen*d2r)*presscale), logp85corr, gB85)

    return g

#%%
#wavelength in nm
wave=np.array([  7.5     ,  12.5     ,  17.5     ,  22.5     ,  27.5     ,
        32.5     ,  37.5     ,  42.5     ,  47.5     ,  52.5     ,
        57.5     ,  62.5     ,  67.5     ,  72.5     ,  77.5     ,
        82.5     ,  87.5     ,  92.5     ,  97.5     , 102.5     ,
       117.30308 , 117.30308 , 117.99515 , 118.69541 , 119.40404 ,
       120.121215, 120.84701 , 121.567   , 121.58166 , 122.325295,
       123.078095, 123.8402  , 124.6118  , 125.39308 , 126.18424 ,
       126.98542 , 127.796815, 128.61868 , 129.451215, 130.294525,
       131.148975, 132.014615, 132.891815, 133.780745, 134.68167 ,
       135.59476 , 136.52035 , 137.458665, 138.409945, 139.866985,
       141.85112 , 143.89232 , 145.99316 , 148.156265, 150.384425,
       152.680675, 155.0481  , 157.49008 , 160.01026 , 162.612365,
       165.300535, 168.079115, 170.952645, 173.16342 , 174.6758  ,
       176.214875, 177.781315, 179.37579 , 180.99919 , 182.65222 ,
       184.335695, 186.050545, 187.797575, 189.577695, 191.391945,
       193.24123 , 195.126615, 197.0491  , 199.0099  , 201.0101  ,
       203.050915, 205.133585, 207.259465, 209.42981 , 211.64613 ,
       213.90988 , 216.22255 , 218.58576 , 221.00121 , 223.47065 ,
       225.995915, 228.57888 , 231.22162 , 233.92611 , 236.69467 ,
       239.52953 , 242.43317 , 245.40799 , 248.4568  , 251.58228 ,
       254.78743 , 258.07528 , 261.449095, 264.912285, 268.468485,
       272.12145 , 275.87519 , 279.73397 , 283.702195, 287.784685,
       291.986375, 296.31253 , 300.7689  , 305.361305, 310.09615 ,
       315.      , 320.      , 325.      , 330.      , 335.      ,
       340.      , 345.      , 350.      , 355.      , 360.      ]) 
#cross section in cm2
so2=np.array([1.180e-18, 3.610e-18, 7.270e-18, 1.050e-17, 1.365e-17, 1.795e-17,
       1.817e-17, 1.939e-17, 2.159e-17, 2.406e-17, 2.504e-17, 2.602e-17,
       2.627e-17, 2.905e-17, 2.709e-17, 2.087e-17, 9.850e-18, 1.554e-17,
       1.653e-17, 1.100e-18, 2.000e-20, 1.250e-18, 2.550e-19, 3.000e-20,
       3.750e-19, 4.450e-18, 8.350e-18, 1.000e-20, 6.000e-19, 2.350e-19,
       4.500e-19, 3.350e-19, 1.750e-17, 8.950e-19, 4.300e-19, 1.100e-19,
       2.050e-19, 4.430e-19, 5.550e-19, 4.200e-19, 6.850e-19, 1.450e-18,
       2.250e-18, 2.300e-18, 4.550e-18, 7.230e-18, 9.500e-18, 1.230e-17,
       1.320e-17, 1.360e-17, 1.400e-17, 1.480e-17, 1.410e-17, 1.290e-17,
       1.150e-17, 9.910e-18, 8.240e-18, 6.580e-18, 4.970e-18, 3.450e-18,
       2.080e-18, 1.230e-18, 7.220e-19, 4.580e-19, 2.740e-19, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 6.620e-24, 6.260e-24,
       5.840e-24, 5.370e-24, 4.890e-24, 4.390e-24, 3.890e-24, 3.400e-24,
       2.940e-24, 2.490e-24, 2.090e-24, 1.720e-24, 1.400e-24, 1.120e-24,
       8.790e-25, 6.760e-25, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00])
so3=np.array([0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00,
       0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00,
       0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00,
       0.00e+00, 0.00e+00, 7.80e-18, 7.97e-18, 8.66e-18, 9.51e-18,
       1.25e-17, 1.84e-17, 2.19e-17, 2.32e-17, 2.30e-17, 2.26e-17,
       2.06e-17, 1.30e-17, 8.91e-18, 7.24e-18, 6.09e-18, 5.66e-18,
       5.87e-18, 6.47e-18, 8.14e-18, 1.24e-17, 1.52e-17, 1.47e-17,
       1.51e-17, 1.51e-17, 1.65e-17, 1.54e-17, 1.35e-17, 1.05e-17,
       7.97e-18, 7.17e-18, 6.28e-18, 5.66e-18, 5.23e-18, 4.47e-18,
       3.69e-18, 2.93e-18, 2.19e-18, 1.63e-18, 1.20e-18, 9.77e-19,
       8.66e-19, 8.14e-19, 8.17e-19, 8.57e-19, 8.40e-19, 8.11e-19,
       7.99e-19, 7.86e-19, 7.63e-19, 7.29e-19, 6.88e-19, 6.40e-19,
       5.88e-19, 5.31e-19, 4.80e-19, 4.38e-19, 4.11e-19, 3.69e-19,
       3.30e-19, 3.26e-19, 3.26e-19, 3.51e-19, 4.11e-19, 4.84e-19,
       6.26e-19, 8.57e-19, 1.17e-18, 1.52e-18, 1.97e-18, 2.55e-18,
       3.24e-18, 4.00e-18, 4.83e-18, 5.79e-18, 6.86e-18, 7.97e-18,
       9.00e-18, 1.00e-17, 1.08e-17, 1.13e-17, 1.15e-17, 1.12e-17,
       1.06e-17, 9.59e-18, 8.31e-18, 6.89e-18, 5.35e-18, 3.91e-18,
       2.67e-18, 1.73e-18, 1.04e-18, 5.85e-19, 3.16e-19, 1.66e-19,
       8.67e-20, 5.01e-20, 2.49e-20, 1.20e-20, 6.17e-21, 2.74e-21,
       1.17e-21, 5.88e-22, 2.66e-22, 1.09e-22, 5.49e-23])
#solar irradiance in cm-2s-1 per nm???
irrad  = np.array([1.00e+09, 1.30e+09, 4.10e+09, 4.80e+09, 7.51e+09, 4.31e+09,
       1.53e+09, 1.09e+09, 1.21e+09, 1.23e+09, 8.70e+08, 9.60e+08,
       4.50e+08, 3.40e+08, 1.89e+09, 3.92e+09, 9.77e+09, 7.94e+09,
       3.34e+09, 4.71e+09, 1.03e+08, 2.66e+08, 1.12e+08, 1.24e+08,
       1.82e+08, 1.90e+08, 7.40e+08, 3.82e+11, 2.28e+09, 3.67e+09,
       1.36e+09, 1.61e+09, 1.32e+09, 1.41e+09, 3.11e+09, 1.06e+09,
       1.37e+09, 1.02e+09, 1.14e+09, 7.29e+09, 2.20e+09, 1.59e+09,
       2.21e+09, 1.24e+10, 1.99e+09, 3.09e+09, 2.57e+09, 2.74e+09,
       3.10e+09, 7.60e+09, 1.01e+10, 1.30e+10, 1.82e+10, 2.33e+10,
       2.66e+10, 2.90e+10, 3.60e+10, 4.75e+10, 6.40e+10, 5.49e+10,
       1.19e+11, 1.76e+11, 2.32e+11, 1.44e+11, 1.83e+11, 1.74e+11,
       2.10e+11, 2.38e+11, 3.04e+11, 3.19e+11, 2.93e+11, 3.62e+11,
       4.73e+11, 5.61e+11, 6.63e+11, 6.90e+11, 9.56e+11, 1.15e+12,
       1.27e+12, 1.52e+12, 1.78e+12, 2.20e+12, 2.69e+12, 4.54e+12,
       7.14e+12, 8.35e+12, 8.39e+12, 1.08e+13, 1.18e+13, 1.60e+13,
       1.34e+13, 1.41e+13, 1.57e+13, 1.38e+13, 1.60e+13, 1.45e+13,
       2.20e+13, 1.99e+13, 1.97e+13, 1.94e+13, 2.91e+13, 4.95e+13,
       4.53e+13, 1.07e+14, 1.20e+14, 1.10e+14, 1.04e+14, 8.24e+13,
       1.52e+14, 2.15e+14, 3.48e+14, 3.40e+14, 3.22e+14, 4.23e+14,
       4.95e+14, 5.44e+14, 5.93e+14, 6.75e+14, 8.15e+14, 7.81e+14,
       8.35e+14, 8.14e+14, 8.53e+14, 9.17e+14, 8.38e+14])

from numba import jit
#@jit(nopython = True, cache = True)
def photolysis (z, sol_zen, o2, o3):
    #z in m
    #o2, o3 in cm-3
    @jit(nopython = True, cache = True)
    def path_z (z_top, z_t, sol_zen, nsteps):
        Re = 6375e3 #m
        sol_zen/=180/np.pi
        B=np.arcsin((Re+z_t) * np.sin(np.pi-sol_zen)/(Re+z_top))
        S_top=np.sin(sol_zen-B)*(Re+z_top)/np.sin(np.pi-sol_zen)

        Ret2=(Re + z_t)**2
        step=S_top/nsteps
        S_top_half= S_top - step/2
        z_step=[np.sqrt(Ret2 +(S_top_half - i*step)**2 -
                        2*(Re + z_t)*(S_top_half - 
                          i*step)*np.cos(np.pi-sol_zen))-Re for i in range(nsteps) ]
        return(z_step, step)

    Jsrc=[]
    Jlya=[]
    Jhart=[]
    J3 = []
    J2 = []
    for iz, z_t in enumerate(z) :
        z_paths,path_step= path_z(z[-1],z_t,sol_zen,500)
        tau=(so2*(np.exp(np.interp(z_paths,z,np.log(o2)))).sum()+
             so3*(np.interp(z_paths,z,o3)).sum()) * path_step *1e2 #m-->cm 
                         
        jo2, jo3 = (irrad* (so2, so3) *np.exp(-tau)) #

        Jhart.append(jo3[np.logical_and(wave>210,wave<310)].sum()) #
        Jsrc.append(jo2[np.logical_and(wave>122,wave<175)].sum())
        Jlya.append(jo2[wave==121.567].sum())
        J3.append(jo3.sum())
        J2.append(jo2.sum())
    return np.array(Jhart), np.array(Jsrc), np.array(Jlya), np.array(J3), np.array(J2)

#%%
def pathleng(heights, Xi):
        # inputs: 
        # heights -- altitdue grid
        # Xi -- sun zenith angle
        deltaz = heights[1:] - heights[:-1]
        deltaz = np.append(deltaz,deltaz[-1])
        heights = np.append(heights, heights[-1]+deltaz[-1])
    
        nheights = len(heights)
        Re = 6370e3 # m Earth radius
    
        if Xi==90:
            	Zt = heights
        else:
            	Zt = (Re + heights) * np.sin(Xi*np.pi/180) - Re
    
        pathl = np.zeros((nheights, nheights))
        for j in range(nheights):
            h = heights[j:] 
            Ztj = Zt[j]
            pathl[j,j:] = np.sqrt(h**2 + 2*Re*(h-Ztj) - Ztj**2)
            
        pathl[:,:-1] = pathl[:, 1:] - pathl[:, 0:-1]
        pathl = pathl[:-1, :-1]
        pathl = np.triu(pathl)
        heights = heights[:-1]
        nheights=nheights-1
        return pathl 
    
#%%
def jfactors(o2_in, o3_in, z, zenithangle):
    #z in m
    #o2, o3 in cm-3
    o2 = o2_in.copy()
    o3 = o3_in.copy()
    o2[-1] *= 10.
    pathl = pathleng(z, zenithangle) * 1e2  # [m -> cm]
    tau = np.matmul(so2[:,None]*o2 + so3[:,None]*o3, pathl.T)
#    tau[:, -1] = tau[:, -1]*10 #compensate the absorption above 100km
    
    jO3 = irrad[:,None] * so3[:,None] * np.exp(-tau)
    jO2 = irrad[:,None] * so2[:,None] * np.exp(-tau)

    hartrange = (wave > 210) & (wave < 310)
    srcrange = (wave > 122) & (wave < 175)
    lyarange = wave==121.567  # wavelength = 121.567 nm

    jhart = np.matmul(hartrange, jO3) 
    jsrc = np.matmul(srcrange, jO2)
    jlya = jO2[lyarange, :].squeeze()
    j3 = jO3.sum(axis=0) 
    j2 = jO2.sum(axis=0)
           
    return jhart, jsrc, jlya, j3, j2
   
#%%
def oxygen_atom(m, T, o3, j3):
    #only works for day, not night
    #(smith et al. 2011)
    o2 = 0.21*m
    ka = 6e-34*(300/T)**2.4
    kb = 8e-12 * np.exp(-2060 / T)
    o = j3 * o3 / (ka * o2 * m)# - kb * o3)
    return o

#%%
def cal_o2delta_loss(o3_in, T, m, z, zenithangle, p, correct_neg_o3=True):
    # z unit should be in m
    # concentration units should be in cm-3
    o3 = o3_in.copy()
    if correct_neg_o3:
        o3[o3<0] = 1e-8
#        print('negative o3')
    
    o2 = 0.21 * m 
    n2 = 0.78 * m 
    co2 = 405e-6*m 
    
    jhart, jsrc, jlya, j3, j2 = photolysis(z, zenithangle, o2, o3) #new
#     jhart, jsrc, jlya, j3, j2 = jfactors(o2, o3, z, zenithangle) #old
    o = oxygen_atom(m, T, o3, j3)

    qy_hart = 0.9 #quatumn yield
    qy_lya = 0.44
    qy_src = 0.9999 
    eff_o1d_o2sig = 0.2 #efficiency 
    eff_o1d_o2sig1 = 1-eff_o1d_o2sig
#    eff_o2sig_o2delta = 1#0.75
    
    #quenching
    def q_o2sig(n2, co2, o2, o, o3):
        q_o2sig.k_n2 = 2.1e-15
        q_o2sig.k_co2 = 4.2e-13
        q_o2sig.k_o3 = 2.2e-11
        q_o2sig.k_o = 8e-14
        q_o2sig.k_o2 = 3.9e-17
        return q_o2sig.k_n2*n2 + q_o2sig.k_co2*co2 + q_o2sig.k_o3*o3 + q_o2sig.k_o*o + q_o2sig.k_o2*o2
    
    def q_o2delta(T, o2, n2, o):
        k_o2 = 3.6e-18*np.exp(-220/T)
        k_n2 = 1.4e-19#1e-20
        k_o = 1.3e-16
        return k_o2*o2 + k_n2*n2 + k_o*o
    
    def q_o1d(T, n2, o2):
        k_n2 = 2.15e-11*np.exp(110/T)#1.8e-11*np.exp(110/T)
        q_o1d.k_o2 = 3.95e-11 # 3.12e-11*np.exp(55/T) #3.95e-11 #3.2e-11*np.exp(70/T)
        return k_n2*n2 + q_o1d.k_o2*o2
    
    def q_o2sig1(T, o2, n2, o, o3):
        q_o2sig1.k_n2 = 7e-13 #max
        q_o2sig1.k_o2 = 2.2e-11*np.exp(-115/T)  #4.2e-11*np.exp(-312/T)
        q_o2sig1.k_o = 4.5e-12
        q_o2sig1.k_o3 = 3e-10 #max
        return q_o2sig1.k_n2*n2 + q_o2sig1.k_o2*o2 + q_o2sig1.k_o*o + q_o2sig1.k_o3*o3

    Q_o1d = q_o1d(T, n2, o2)
    Q_o2delta = q_o2delta(T, o2, n2, o)
    Q_o2sig = q_o2sig(n2, co2, o2, o, o3)
    Q_o2sig1 = q_o2sig1(T, o2, n2, o, o3)
    
    A_o2sig = 7.58e-2
    A_o2delta = 2.23e-4 # 2.58e-4
    A_o1d = 0 #6.81e-3 #from donal's code? 
    A_o2sig1 = 7e-2
    
    # o(1d) reactions ===========
    prod_o1d_from_o2 = o2 * (qy_src * jsrc + qy_lya * jlya)
    prod_o1d_from_o3 = qy_hart * o3 * jhart
    prod_o1d = prod_o1d_from_o3 + prod_o1d_from_o2
    f_1d_o3 = prod_o1d_from_o3 / prod_o1d
    f_1d_o2 = prod_o1d_from_o2 / prod_o1d
    
    loss_o1d = Q_o1d + A_o1d
    o1d = prod_o1d / loss_o1d
    
    # o2(sig v=1) reactions ============
    prod_o2sig1_from_gB = gB(p, zenithangle) * o2
    prod_o2sig1_from_o1d = eff_o1d_o2sig1 * q_o1d.k_o2 * o2 * o1d
    prod_o2sig1 = prod_o2sig1_from_gB + prod_o2sig1_from_o1d
    f_o2sig1_gB = prod_o2sig1_from_gB / prod_o2sig1
    f_o2sig1_1d = prod_o2sig1_from_o1d / prod_o2sig1
    
    loss_o2sig1 = Q_o2sig1 + A_o2sig1
    o2sig1 = prod_o2sig1/loss_o2sig1
    
    # o2(sig v=0) reactions ======================
    k_o_o = 4.7e-33*(300/T)
    c_o2 = 6.6 #empirical quenchin coefficient
    c_o = 19 #empirical quenchin coefficient
    
    prod_o2sig_from_barth = k_o_o * o**2 * m * o2 / (c_o2*o2 + c_o*o)
    prod_o2sig_from_o1d = eff_o1d_o2sig * q_o1d.k_o2 * o2 * o1d
    prod_o2sig_from_gA = gA(p, zenithangle) * o2
    prod_o2sig_from_o2sig1 = (q_o2sig1.k_o2*o2 + q_o2sig1.k_n2*n2) * o2sig1
    prod_o2sig = prod_o2sig_from_o1d + prod_o2sig_from_gA + prod_o2sig_from_barth + prod_o2sig_from_o2sig1
    f_o2sig_1d = prod_o2sig_from_o1d / prod_o2sig
    f_o2sig_gA = prod_o2sig_from_gA / prod_o2sig
    f_o2sig_barth = prod_o2sig_from_barth / prod_o2sig
    f_o2sig_o2sig1 = prod_o2sig_from_o2sig1 / prod_o2sig
    f_o2sig_o3 = (f_o2sig_1d + f_o2sig_o2sig1*f_o2sig1_1d)*f_1d_o3
    f_o2sig_o2 = (f_o2sig_1d + f_o2sig_o2sig1*f_o2sig1_1d)*f_1d_o2
    f_o2sig_gB = f_o2sig_o2sig1*f_o2sig1_gB
    loss_o2sig = Q_o2sig + A_o2sig
    o2sig = prod_o2sig / loss_o2sig
    
    # o2(delta) reactions =========================
    prod_o2delta_from_o3 = qy_hart * o3 * jhart
#    prod_o2delta_from_o2sig =  eff_o2sig_o2delta * Q_o2sig * o2sig
    prod_o2delta_from_o2sig = (0.75*q_o2sig.k_o*o + 1*q_o2sig.k_o2*o2 
                               + 0.3*q_o2sig.k_o3*o3 + 0.5*q_o2sig.k_n2*n2 
                               + 0.95*q_o2sig.k_co2*co2) * o2sig
    prod_o2delta_from_gIRA = gIRA(p, zenithangle) * o2
    prod_o2delta = prod_o2delta_from_o3 + prod_o2delta_from_o2sig + prod_o2delta_from_gIRA
    f_o2delta_o3 = prod_o2delta_from_o3 / prod_o2delta
    f_o2delta_o2sig = prod_o2delta_from_o2sig / prod_o2delta
    f_o2delta_gIRA = prod_o2delta_from_gIRA / prod_o2delta
    
    loss_o2delta = Q_o2delta + A_o2delta
    o2delta = prod_o2delta/loss_o2delta
    
    
    return (o2delta, Q_o2delta, A_o2delta)

#%%
def cal_o2delta_new(o3_in, T, m, z, zenithangle, p, correct_neg_o3=True):
    # z unit should be in m
    # concentration units should be in cm-3
    o3 = o3_in.copy()
    if correct_neg_o3:
        o3[o3<0] = 1e-8
#        print('negative o3')
    
    o2 = 0.21 * m 
    n2 = 0.78 * m 
    co2 = 405e-6*m 
    
#    jhart, jsrc, jlya, j3, j2 = photolysis(z, zenithangle, o2, o3)
    jhart, jsrc, jlya, j3, j2 = jfactors(o2, o3, z, zenithangle)
    o = oxygen_atom(m, T, o3, j3)

    qy_hart = 0.9 #quatumn yield
    qy_lya = 0.44
    qy_src = 0.9999 
    eff_o1d_o2sig = 0.2 #efficiency 
    eff_o1d_o2sig1 = 1-eff_o1d_o2sig
#    eff_o2sig_o2delta = 1#0.75
    
    #quenching
    def q_o2sig(n2, co2, o2, o, o3):
        q_o2sig.k_n2 = 2.1e-15
        q_o2sig.k_co2 = 4.2e-13
        q_o2sig.k_o3 = 2.2e-11
        q_o2sig.k_o = 8e-14
        q_o2sig.k_o2 = 3.9e-17
        return q_o2sig.k_n2*n2 + q_o2sig.k_co2*co2 + q_o2sig.k_o3*o3 + q_o2sig.k_o*o + q_o2sig.k_o2*o2
    
    def q_o2delta(T, o2, n2, o):
        k_o2 = 3.6e-18*np.exp(-220/T)
        k_n2 = 1.4e-19#1e-20
        k_o = 1.3e-16
        return k_o2*o2 + k_n2*n2 + k_o*o
    
    def q_o1d(T, n2, o2):
        k_n2 = 2.15e-11*np.exp(110/T)#1.8e-11*np.exp(110/T)
        q_o1d.k_o2 = 3.95e-11 # 3.12e-11*np.exp(55/T) #3.95e-11 #3.2e-11*np.exp(70/T)
        return k_n2*n2 + q_o1d.k_o2*o2
    
    def q_o2sig1(T, o2, n2, o, o3):
        q_o2sig1.k_n2 = 7e-13 #max
        q_o2sig1.k_o2 = 2.2e-11*np.exp(-115/T)  #4.2e-11*np.exp(-312/T)
        q_o2sig1.k_o = 4.5e-12
        q_o2sig1.k_o3 = 3e-10 #max
        return q_o2sig1.k_n2*n2 + q_o2sig1.k_o2*o2 + q_o2sig1.k_o*o + q_o2sig1.k_o3*o3

    Q_o1d = q_o1d(T, n2, o2)
    Q_o2delta = q_o2delta(T, o2, n2, o)
    Q_o2sig = q_o2sig(n2, co2, o2, o, o3)
    Q_o2sig1 = q_o2sig1(T, o2, n2, o, o3)
    
    A_o2sig = 7.58e-2
    A_o2delta = 2.23e-4 # 2.58e-4
    A_o1d = 0 #6.81e-3 #from donal's code? 
    A_o2sig1 = 7e-2
    
    # o(1d) reactions ===========
    prod_o1d_from_o2 = o2 * (qy_src * jsrc + qy_lya * jlya)
    prod_o1d_from_o3 = qy_hart * o3 * jhart
    prod_o1d = prod_o1d_from_o3 + prod_o1d_from_o2
    f_1d_o3 = prod_o1d_from_o3 / prod_o1d
    f_1d_o2 = prod_o1d_from_o2 / prod_o1d
    
    loss_o1d = Q_o1d + A_o1d
    o1d = prod_o1d / loss_o1d
    
    # o2(sig v=1) reactions ============
#    k_o1d_o2 = 3.95e-11 #3.2e-11*np.exp(70/T) #
    prod_o2sig1_from_gB = gB(p, zenithangle) * o2
    prod_o2sig1_from_o1d = eff_o1d_o2sig1 * q_o1d.k_o2 * o2 * o1d
    prod_o2sig1 = prod_o2sig1_from_gB + prod_o2sig1_from_o1d
    f_o2sig1_gB = prod_o2sig1_from_gB / prod_o2sig1
    f_o2sig1_1d = prod_o2sig1_from_o1d / prod_o2sig1
    
    loss_o2sig1 = Q_o2sig1 + A_o2sig1
    o2sig1 = prod_o2sig1/loss_o2sig1
    
    # o2(sig v=0) reactions ======================
    k_o_o = 4.7e-33*(300/T)
    c_o2 = 6.6 #empirical quenchin coefficient
    c_o = 19 #empirical quenchin coefficient
    
    prod_o2sig_from_barth = k_o_o * o**2 * m * o2 / (c_o2*o2 + c_o*o)
    prod_o2sig_from_o1d = eff_o1d_o2sig * q_o1d.k_o2 * o2 * o1d
    prod_o2sig_from_gA = gA(p, zenithangle) * o2
    prod_o2sig_from_o2sig1 = (q_o2sig1.k_o2*o2 + q_o2sig1.k_n2*n2) * o2sig1
    prod_o2sig = prod_o2sig_from_o1d + prod_o2sig_from_gA + prod_o2sig_from_barth + prod_o2sig_from_o2sig1
    f_o2sig_1d = prod_o2sig_from_o1d / prod_o2sig
    f_o2sig_gA = prod_o2sig_from_gA / prod_o2sig
    f_o2sig_barth = prod_o2sig_from_barth / prod_o2sig
    f_o2sig_o2sig1 = prod_o2sig_from_o2sig1 / prod_o2sig
    
    loss_o2sig = Q_o2sig + A_o2sig
    o2sig = prod_o2sig / loss_o2sig
    
    # o2(delta) reactions =========================
    prod_o2delta_from_o3 = qy_hart * o3 * jhart
#    prod_o2delta_from_o2sig =  eff_o2sig_o2delta * Q_o2sig * o2sig
    prod_o2delta_from_o2sig = (0.75*q_o2sig.k_o*o + 1*q_o2sig.k_o2*o2 
                               + 0.3*q_o2sig.k_o3*o3 + 0.5*q_o2sig.k_n2*n2 
                               + 0.95*q_o2sig.k_co2*co2) * o2sig
    prod_o2delta_from_gIRA = gIRA(p, zenithangle) * o2
    prod_o2delta = prod_o2delta_from_o3 + prod_o2delta_from_o2sig + prod_o2delta_from_gIRA
    f_o2delta_o3 = prod_o2delta_from_o3 / prod_o2delta
    f_o2delta_o2sig = prod_o2delta_from_o2sig / prod_o2delta
    f_o2delta_gIRA = prod_o2delta_from_gIRA / prod_o2delta
    
    loss_o2delta = Q_o2delta + A_o2delta
    o2delta = prod_o2delta/loss_o2delta
    
    f_barth = f_o2delta_o2sig*f_o2sig_barth
    f_gA = f_o2delta_o2sig*f_o2sig_gA
    f_o3 = f_o2delta_o2sig*(f_o2sig_1d + f_o2sig_o2sig1*f_o2sig1_1d)*f_1d_o3 + f_o2delta_o3
    f_o2 = f_o2delta_o2sig*(f_o2sig_1d + f_o2sig_o2sig1*f_o2sig1_1d)*f_1d_o2
    f_gIRA = f_o2delta_gIRA
    f_gB = f_o2delta_o2sig*f_o2sig_o2sig1*f_o2sig1_gB
#    print(f_barth+f_gA+f_o3+f_o2+f_gIRA+f_gB)
#    print(max(f_gIRA[70:80])*100, max(f_gB[70:80])*100)
    return [o2delta, f_o3, f_o2, f_gA, f_gB, f_gIRA, f_barth]


#%% 
top = 200
if __name__ == '__main__':    
#    path = '/home/anqil/Documents/Python/iris/old_files/'
#    file = 'apriori_temp.nc'
#    ds = xr.open_dataset(path+file)
#    o3 = ds.o3_vmr.values * ds.m.values
    file = '/home/anqil/Documents/osiris_database/ex_data/msis_cmam_climatology_200.nc'
    ds = xr.open_dataset(file).interp(month=1, lat=13.5)
    ds = ds.sel(z=slice(0,top))
    m = (ds.o2+ds.n2+ds.o) * 1e-6 #cm-3
    o3 = ds.o3_vmr.interp(lst=6.876)* m #cm-3
    sza = [30, 60, 85, 89.9]
    
    fig, ax = plt.subplots(nrows=1, ncols=2, sharey=True, figsize=(15,5))
    ls = ['-', ':', '--', '-.'] 
 
    aaa = []
    for i in range(len(sza)):
#        result = cal_o2delta(o3, ds.T.values, ds.m.values, ds.altgrid.values*1e3, sza[i])
#        result = cal_o2delta(o3.values, ds.T.values, m.values, 
#                             ds.z.values*1e3, sza[i], gA(ds.p, sza[i]))
        result = cal_o2delta_new(o3.values, ds.T.values, m.values, 
                             ds.z.values*1e3, sza[i], ds.p.values)
        aaa.append(result)
          
#    for i in range(len(sza)):
#        result = aaa[i]
        ax[0].plot(result[1]*100, ds.z, ls=ls[i], color='C0')
        ax[0].plot(result[2]*100, ds.z, ls=ls[i], color='C1')
        ax[0].plot(result[3]*100, ds.z, ls=ls[i], color='C2')
        ax[0].plot(result[4]*100, ds.z, ls=ls[i], color='C3')
        ax[0].plot(result[5]*100, ds.z, ls=ls[i], color='C4')
        ax[0].plot(result[6]*100, ds.z, ls=ls[i], color='C5')
    
        ax[1].plot(result[1]*result[0], ds.z, ls=ls[i], color='C0')
        ax[1].plot(result[2]*result[0], ds.z, ls=ls[i], color='C1')
        ax[1].plot(result[3]*result[0], ds.z, ls=ls[i], color='C2')
        ax[1].plot(result[4]*result[0], ds.z, ls=ls[i], color='C3')
        ax[1].plot(result[5]*result[0], ds.z, ls=ls[i], color='C4')
        ax[1].plot(result[6]*result[0], ds.z, ls=ls[i], color='C5')
#        ax[1].plot(result[0], ds.z, ls=ls[i], color='k', label='Total {}'.format(sza[i]))
        
    plt.legend(['$O_3$', '$O_2$', '$g_A$',  '$g_B$', '$g_{IRA}$', 'Barth'],
               loc='upper left')    
    ax[0].set(xlabel = 'Percentage',
              ylabel = 'Altitude / km')#,
#              title = 'contribution to singlet delta,\n sza={}'.format(sza))
    ax[1].set(xlabel = 'Concentration / $cm^{-3}$',
#              ylabel = 'z',
#              title = 'contribution to singlet delta,\n sza={}'.format(sza),
              xlim = (1e-5, 1e11),
              ylim = (60, 100),
              )
    ax[1].set_xscale('log')
    plt.rcParams.update({'font.size': 14})
#    plt.savefig('/home/anqil/Documents/reportFigure/article2/contributions.png')

#%%
if __name__ == '__main__':    
    file = 'msis_cmam_climatology_z200_lat8576.nc'
    ds = xr.open_dataset(file).interp(month=1, lat=13.5)
    ds = ds.sel(z=slice(0,top))
    m = (ds.o2+ds.n2+ds.o) * 1e-6 #cm-3
    o3 = (ds.o3_vmr.interp(lst=6.876)* m).values #cm-3
    o2 = ds.o2.values*1e-6
    z = ds.z.values
    sza = [30, 60, 85, 89.9]
    fig, ax = plt.subplots(1, 3, sharey=True)
    for i in range(len(sza)):
        jhart, jsrc, jlya, j3, j2 = jfactors(o2, o3, z, sza[i])
    
        ax[0].plot(jhart,z)
        ax[0].set(ylim=(0,100))
        ax[1].plot(jsrc, z)
        ax[2].plot(jlya,z)

    
#%% test test test ! 
#if __name__ == '__main__':    
#    path = '/home/anqil/Documents/osiris_database/iris_ver_o3/'
#    #file = 'o3_{}{}_5p1_o3false.nc'
#    file = 'o3_{}{}_mr08_o3false.nc'.format(2007,11)
#    #file = 'test_with_mr_bound.nc'
#    ds = xr.open_dataset(path+file)
#    ds = ds.isel(mjd=1)
#    # load climatology
#    path = '/home/anqil/Documents/osiris_database/ex_data/'
#    file = 'msis_cmam_climatology_z200_lat8576.nc'
#    clima = xr.open_dataset(path+file)#.interp(z=z*1e-3)
#    clima = clima.update({'m':(clima.o + clima.o2 + clima.n2)*1e-6}) #cm-3
#    clima = clima.sel(month=8)
#    o3_clima = clima.o3_vmr * clima.m #cm-3
#    
#    T_a = clima.T.interp(lat=ds.latitude, z=ds.z[ds.mr>0.8]*1e-3)
#    m_a = clima.m.interp(lat=ds.latitude, z=ds.z[ds.mr>0.8]*1e-3)
#    p_a = clima.p.interp(lat=ds.latitude, z=ds.z[ds.mr>0.8]*1e-3) 
#    
#    sol_zen = ds.sza.item()
#    o2delta = cal_o2delta_new(ds.o3[ds.mr>0.8].data, T_a.data, m_a.data, ds.z[ds.mr>0.8],
#                                            sol_zen, p_a.data)[0]
#    A_o2delta = 2.23e-4
#    o2delta_ver = o2delta * A_o2delta
#    plt.figure()
#    plt.semilogx(o2delta_ver, ds.z[ds.mr>0.8], '.', label='problem o3 VER')
#    plt.semilogx(ds.ver, ds.z, '-')
#    
#    
#    result = cal_o2delta_new(ds.o3[ds.mr>0.8].values, T_a.data, m_a.data, 
#                             ds.z[ds.mr>0.8], sol_zen, p_a.data)
#    fig, ax = plt.subplots(nrows=1, ncols=2, sharey=True, figsize=(15,5))
#    ax[1].plot(result[1]*result[0], ds.z[ds.mr>0.8], color='C0')
#    ax[1].plot(result[2]*result[0], ds.z[ds.mr>0.8], color='C1')
#    ax[1].plot(result[3]*result[0], ds.z[ds.mr>0.8], color='C2')
#    ax[1].plot(result[4]*result[0], ds.z[ds.mr>0.8], color='C3')
#    ax[1].plot(result[5]*result[0], ds.z[ds.mr>0.8], color='C4')
#    ax[1].plot(result[6]*result[0], ds.z[ds.mr>0.8], color='C5')
#    # ax[1].plot(result[0], ds.z, ls=ls[i], color='k', label='Total {}'.format(sza[i]))
#    ax[1].set(xlabel = 'Concentration / $cm^{-3}$',
#              ylabel = 'z',
#              title = 'contribution to singlet delta',
#              xlim = (1e-5, 1e11),
#              ylim = (60e3, 100e3))
#    ax[1].set_xscale('log')
#    plt.legend(['$O_3$', '$O_2$', '$g_A$',  '$g_B$', '$g_{IRA}$', 'Barth'])
#    

#%%
#def cal_o2delta(o3, T, m, z, zenithangle, gA):
#    # z unit should be in m
#    # concentration units should be in cm-3
##    o3[o3<0] = 0
#    o2 = 0.21 * m 
#    n2 = 0.78 * m 
#    co2 = 405e-6*m 
#    
#    
##    jhart, jsrc, jlya, j3 = photolysis(z, zenithangle, o2, o3)
#    jhart, jsrc, jlya, j3, j2 = jfactors(np.zeros(len(m)), o2, o3, n2, z, zenithangle)
#    o = oxygen_atom(m, T, o3, j3)
#
#    qy_hart = 0.9 #quatumn yield
#    qy_lya = 0.44
#    qy_src = 0.9999 
#    eff_o1d_o2sig = 0.77 #efficiency 
#    
#    #quenching
#    def q_o2sig(n2, co2, o2, o, o3):
#        k_n2 = 2.1e-15
#        k_co2 = 4.2e-13
#        k_o3 = 2.2e-11
#        k_o = 8e-14
#        k_o2 = 3.9e-17
#        return n2*k_n2 + co2*k_co2 + o3*k_o3 + o*k_o + o2*k_o2
#    
#    def q_o2delta(T, o2, n2, o):
#        k_o2 = 3.6e-18*np.exp(-220/T)
#        k_n2 = 1e-20
#        k_o = 1.3e-16
#        return k_o2*o2 + k_n2*n2 + k_o*o
#    
#    def q_o1d(T, n2, o2):
#        k_n2 = 1.8e-11*np.exp(110/T)
#        k_o2 = 3.2e-11*np.exp(70/T)
#        return k_n2*n2 + k_o2*o2
#
#    Q_o1d = q_o1d(T, n2, o2)
#    Q_o2delta = q_o2delta(T, o2, n2, o)
#    Q_o2sig = q_o2sig(n2, co2, o2, o, o3)
#    
#    A_o2sig = 0.0758
#    A_o2delta = 2.23e-4 # 2.58e-4
#    A_o1d = 0 #6.81e-3 #from donal's code? 
#    
#    prod_o1d_from_o2 = o2 * (qy_src * jsrc + qy_lya * jlya)
#    prod_o1d_from_o3 = qy_hart * o3 * jhart
#    prod_o1d = prod_o1d_from_o3 + prod_o1d_from_o2
#    f_1d_o3 = prod_o1d_from_o3 / prod_o1d
#    f_1d_o2 = prod_o1d_from_o2 / prod_o1d
#    
#    loss_o1d = Q_o1d + A_o1d
#    o1d = prod_o1d / loss_o1d
#    
#    k_o_o = 4.7e-33*(300/T)
#    c_o2 = 6.6 #empirical quenchin coefficient
#    c_o = 19 #empirical quenchin coefficient
#    k_o1d_o2 = 3.2e-11*np.exp(70/T) 
#    prod_o2sig_barth = k_o_o * o**2 * m * o2 / (c_o2*o2 + c_o*o)
#    prod_o2sig = eff_o1d_o2sig * k_o1d_o2 * o2 * o1d + gA * o2 + prod_o2sig_barth
#    f_o2sig_1d = eff_o1d_o2sig * k_o1d_o2 * o2 * o1d / prod_o2sig
#    f_o2sig_gA = gA * o2 / prod_o2sig
#    f_o2sig_barth = prod_o2sig_barth / prod_o2sig
#    
#    loss_o2sig = Q_o2sig + A_o2sig
#    o2sig = prod_o2sig / loss_o2sig
#    
#    prod_o2delta_from_o3 = qy_hart * o3 * jhart
#    prod_o2delta_from_o2sig = Q_o2sig * o2sig
#    prod_o2delta = prod_o2delta_from_o3 + prod_o2delta_from_o2sig
#    f_o2delta_o3 = prod_o2delta_from_o3 / prod_o2delta
#    f_o2delta_o2sig = prod_o2delta_from_o2sig / prod_o2delta
#    
#    loss_o2delta = Q_o2delta + A_o2delta
#    o2delta = prod_o2delta/loss_o2delta
#    
#    return o2delta, f_o2delta_o2sig*f_o2sig_barth, f_o2delta_o2sig*f_o2sig_gA, f_o2delta_o2sig*f_o2sig_1d*f_1d_o3 + f_o2delta_o3, f_o2delta_o2sig*f_o2sig_1d*f_1d_o2

